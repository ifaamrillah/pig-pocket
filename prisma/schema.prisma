generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Start Next Auth ---
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

enum RoleType {
  ADMIN
  USER
}

enum PlanType {
  FREE
  PRO
  LIFETIME
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  // Addons
  password      String?
  role          RoleType @default(USER)
  plan          PlanType @default(FREE)
  expiredPlan   DateTime
  
  accounts      Account[]
  sessions      Session[]

  vault        Vault[]
  categories   Category[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}
// --- End Next Auth ---


// --- Start Master ---
enum StatusType {
  ACTIVE
  INACTIVE
}

enum VaultType {
  TRANSACTION
}

model Vault {
  id String @id @default(cuid())
  name String
  startingBalance Decimal
  type VaultType @default(TRANSACTION)
  status StatusType @default(ACTIVE)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  allowDelete Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Category {
  id String @id @default(cuid())
  name String
  type CategoryType @default(INCOME)
  status StatusType @default(ACTIVE)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  allowDelete Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}
// --- End Master ---